diff -rNu a/drivers/net/dsa/qca8k.c b/drivers/net/dsa/qca8k.c
--- a/drivers/net/dsa/qca8k.c	2020-08-26 11:41:08.000000000 +0300
+++ b/drivers/net/dsa/qca8k.c	2020-09-11 11:58:04.548065248 +0300
@@ -635,6 +635,37 @@
 	return 0;
 }
 
+static void qca8k_load_initvals(struct qca8k_priv *priv)
+{
+	const __be32 *paddr;
+	int len;
+	int i;
+
+	/* Also we enable of disable strict cpu port mode flag */
+	if(of_property_read_bool(priv->dev->of_node, "qca,strict-cpu-mode"))
+		priv->strict_cpu_mode = 1;
+	else
+		priv->strict_cpu_mode = 0;
+
+	if(!priv->dev || !priv->dev->of_node)
+		return;
+	paddr = of_get_property(priv->dev->of_node, "qca,swregs-initvals", &len);
+	if (!paddr || len < (2 * sizeof(*paddr)))
+		return;
+
+	len /= sizeof(*paddr);
+
+	for (i = 0; i < len - 1; i += 2) {
+		u32 reg;
+		u32 val;
+
+		reg = be32_to_cpup(paddr + i);
+		val = be32_to_cpup(paddr + i + 1);
+
+		qca8k_write(priv, reg, val);
+	}
+}
+
 static int
 qca8k_setup(struct dsa_switch *ds)
 {
@@ -670,6 +701,9 @@
 	if (ret < 0)
 		return ret;
 
+	/* Load optional initial values to switch registers */
+	qca8k_load_initvals(priv);
+
 	/* Enable CPU Port, force it to maximum bandwidth and full-duplex */
 	mask = QCA8K_PORT_STATUS_SPEED_1000 | QCA8K_PORT_STATUS_TXFLOW |
 	       QCA8K_PORT_STATUS_RXFLOW | QCA8K_PORT_STATUS_DUPLEX;
@@ -710,6 +744,11 @@
 		if (dsa_is_cpu_port(ds, i)) {
 			qca8k_rmw(priv, QCA8K_PORT_LOOKUP_CTRL(QCA8K_CPU_PORT),
 				  QCA8K_PORT_LOOKUP_MEMBER, dsa_user_ports(ds));
+			if(priv->strict_cpu_mode > 0){
+				/* Disable ARP Auto-learning */
+				qca8k_reg_clear(priv, QCA8K_PORT_LOOKUP_CTRL(QCA8K_CPU_PORT),
+					QCA8K_PORT_LOOKUP_LEARN);
+			}
 		}
 
 		/* Invividual user ports get connected to CPU port only */
@@ -720,9 +759,14 @@
 				  QCA8K_PORT_LOOKUP_MEMBER,
 				  BIT(QCA8K_CPU_PORT));
 
-			/* Enable ARP Auto-learning by default */
-			qca8k_reg_set(priv, QCA8K_PORT_LOOKUP_CTRL(i),
-				      QCA8K_PORT_LOOKUP_LEARN);
+			/* Enable or Disable ARP Auto-learning */
+			if(priv->strict_cpu_mode == 0){
+				qca8k_reg_set(priv, QCA8K_PORT_LOOKUP_CTRL(i),
+					QCA8K_PORT_LOOKUP_LEARN);
+			}else{
+				qca8k_reg_clear(priv, QCA8K_PORT_LOOKUP_CTRL(i),
+					QCA8K_PORT_LOOKUP_LEARN);
+			}
 
 			/* For port based vlans to work we need to set the
 			 * default egress vid
@@ -887,6 +931,9 @@
 	int port_mask = BIT(QCA8K_CPU_PORT);
 	int i;
 
+	if(priv->strict_cpu_mode > 0)
+		return 0;
+
 	for (i = 1; i < QCA8K_NUM_PORTS; i++) {
 		if (dsa_to_port(ds, i)->bridge_dev != br)
 			continue;
@@ -912,6 +959,9 @@
 	struct qca8k_priv *priv = (struct qca8k_priv *)ds->priv;
 	int i;
 
+	if(priv->strict_cpu_mode > 0)
+		return 0;
+
 	for (i = 1; i < QCA8K_NUM_PORTS; i++) {
 		if (dsa_to_port(ds, i)->bridge_dev != br)
 			continue;
diff -rNu a/drivers/net/dsa/qca8k.h b/drivers/net/dsa/qca8k.h
--- a/drivers/net/dsa/qca8k.h	2020-08-26 11:41:08.000000000 +0300
+++ b/drivers/net/dsa/qca8k.h	2020-09-10 16:08:51.575103887 +0300
@@ -176,6 +176,7 @@
 	struct device *dev;
 	struct dsa_switch_ops ops;
 	struct gpio_desc *reset_gpio;
+	int strict_cpu_mode;
 };
 
 struct qca8k_mib_desc {
diff -rNu a/net/dsa/slave.c b/net/dsa/slave.c
--- a/net/dsa/slave.c	2020-09-10 16:06:43.710217854 +0300
+++ b/net/dsa/slave.c	2020-09-10 16:08:17.286864435 +0300
@@ -1451,6 +1451,9 @@
 		goto out_gcells;
 	}
 
+	if(slave_dev->phydev)
+		genphy_suspend(slave_dev->phydev);
+
 	dsa_slave_notify(slave_dev, DSA_PORT_REGISTER);
 
 	ret = register_netdev(slave_dev);
